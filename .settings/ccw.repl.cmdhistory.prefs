#Fri Dec 23 23:01:37 GMT 2011
cmdhistory=[";; Loading file src\\\\problem03.clj" "(ceil 1.1)" "(clojure.contrib.math/ceil 1.1)" "(int (clojure.contrib.math/ceil 1.1))" "(int (clojure.contrib.math/ceil (clojure.contrib.math/sqrt 600851475143)))" ";; Loading file src\\\\problem03.clj" "(int (clojure.contrib.math/ceil (clojure.contrib.math/sqrt nbr)))" "(int (clojure.contrib.math/ceil (clojure.contrib.math/sqrt 10)))" "(/ 600851475143 2)" ";; Loading file src\\\\problem03.clj" "(first (divisors 600851475143))" "(first (problem03/divisors 600851475143))" ";; Loading file src\\\\problem03.clj" "(first (problem03/divisors 600851475143))" ";; Loading file src\\\\problem03.clj" "(take 10(lazy-stream-inc 10000000000))" "(take 10 (problem03/lazy-stream-inc 10000000000))" ";; Loading file src\\\\problem03.clj" "(problem03/divisors 10)" ";; Loading file src\\\\problem03.clj" "(problem03/divisors 30)" ";; Loading file src\\\\problem03.clj" "(get-factors 6552)" "(problem03/get-factors 6552)" ";; Loading file src\\\\problem03.clj" "(problem03/get-factors 6552)" ";; Loading file src\\\\problem03.clj" "(problem03/get-factors 6552)" "(problem03/get-factors 15265524)" "(problem03/get-factors 60085147)" ";; Loading file src\\\\problem03.clj" "(problem03/get-factors 60085147)" "(problem03/get-factors 600851475143)" "(problem03/get-factors 13195)" ";; Loading file src\\\\problem03.clj" "(problem03/get-factors 13195)" ";; Loading file src\\\\problem03.clj" "(problem03/get-factors 13195)" "(problem03/get-factors 600851475143)" "(reduce max (71 839 1471 6857))" "(reduce max '(71 839 1471 6857))" ";; Loading file src\\\\problem03.clj" ";; Loading file src\\\\problem04.clj" ";; Loading file src\\\\problem03.clj" ";; Loading file src\\\\problem04.clj" "(sort '(5 2))" "(distinct '(1 2) '(1 2) '(2 3))" "(distinct (list '(1 2) '(1 2) '(2 3)))" "(reverse \\"abcde\\")" "(\= \\"aba\\" \\"aba\\")" "(\= \\"aba\\" (reverse \\"aba\\"))" "(doc reverse\\n     )" "(doc distinct)" "(.toString (reverse \\"aba\\"))" "(str 123)" "(reverse (str 123))" "(str (reverse (str 123)))" "(join (reverse (str 123)))" "(doc join\\n     )" "(reverse (reverse \\"123\\"))" "(str (reverse 123))" "(str (reverse \\"123\\"))" "(\= (reverse \\"aba\\") (reverse (reverse \\"aba\\")))" ";; Loading file src\\\\problem04.clj" "(problem04/is-palindrome? 999992299999)" "(problem04/is-palindrome? 999992291999)" "(map (fn[n] (list n n)) '(1 2 3))" "(map (fn[n] (list (list n n))) '(1 2 3))" " (mapcat (fn[n] (list (list n n))) '(1 2 3))" "(mapcat \\n  (fn[n] (list \\n           (mapcat \\n             (fn[y] (list n y)) \\n             '(1 2 3)))) \\n  '(1 2 3))" "(mapcat \\r\\n     (fn[n] (list \\r\\n              (map \\r\\n                (fn[y] (list n y)) \\r\\n                '(1 2 3)))) \\r\\n     '(1 2 3))" "(mapcat \\r\\n        (fn[n] (list \\r\\n                 (map \\r\\n                   (fn[y] (sort (list n y))) \\r\\n                   '(1 2 3)))) \\r\\n        '(1 2 3))" "(map\\r\\n           (fn[n] (list \\r\\n                    (map \\r\\n                      (fn[y] (sort (list n y))) \\r\\n                      '(1 2 3)))) \\r\\n           '(1 2 3))" "(mapcat\\r\\n  (fn[n] (list \\r\\n                       (mapcat\\r\\n                         (fn[y] (sort (list n y))) \\r\\n                         '(1 2 3)))) \\r\\n              '(1 2 3))" "(mapcat\\r\\n    (fn[n] \\r\\n             (mapcat\\r\\n    (fn[y] (sort (list n y))) \\r\\n    '(1 2 3)))\\r\\n'(1 2 3))" ";; Loading file src\\\\problem04.clj" ";; Loading file src\\\\problem03.clj" ";; Loading file src\\\\problem06.clj" "(lazy-stream 10 1)" "(lazy-stream 10)" ";; Loading file src\\\\problem06.clj" ";; Loading file src\\\\problem04.clj" "(problem04/is-palindrome? 9998999)" "(let \\r\\n  [full (lazy-stream 301 100)]\\r\\n\\t(distinct \\r\\n   (mapcat\\r\\n\\t  (fn[n] \\r\\n\\t    (map\\r\\n\\t        (fn[y] (sort (list n y))) \\r\\n\\t         full))\\r\\n\\t  full)))" ";; Loading file src\\\\problem04.clj" "(problem04/is-palindrome? 9009)" ";; Loading file src\\\\problem04.clj" "(second '(1))" ";; Loading file src\\\\problem10.clj" "(nth 1 '(1 2 3))" "(nth '(1 2 3) 1)" ";; Loading file src\\\\problem10.clj" "(defn primes-iteration [ls th]\\r\\n  ; Get elem in *th*th place\\r\\n  ; Remove all multiples of elem in ls\\r\\n  ; Next iteration\\r\\n  ; If th is outside the list, return ls\\r\\n  (let [elem (nth ls th)]\\r\\n    (if (nil? elem)\\r\\n      ls\\r\\n      (primes-iteration \\r\\n        (filter \#(or (\= % elem) (not (is-divisor-of elem %)) ) ls) \\r\\n        (+ th 1))))\\n  \\r\\n(nth 1000 '(1 2 3))" "(nth '(1 2 3 ) 123)" "(first '())" "(cons '(1 2 3) 4)" "(cons 4 '(1 2 3))" "(cons '(1 2 3) '(4))" ";; Loading file src\\\\problem10.clj" ";; Loading file src\\\\problem16.clj" ";; Loading file src\\\\problem10.clj" "(*)" ";; Loading file src\\\\problem16.clj" "(problem16/power 2 2)" "(defn power [base exp]\\r\\n  (cond\\r\\n    (\= exp 0) 1\\r\\n    (\= exp 1) base\\r\\n    (true) (if (\= 0 (mod exp 2))\\r\\n\\t    (let [parcial (power base(/ exp 2))]\\r\\n\\t      (* parcial parcial))\\r\\n\\t    (let [parcial (power base (/ (exp - 1) 2))]\\r\\n\\t      (* parcial parcial base)))))" "(power 2 2)" "(problem16/power 2 2)" ";; Loading file src\\\\problem16.clj" "(problem16/power 2 2)" "(problem16/power 2 100)" "(problem16/power 2 5)" ";; Loading file src\\\\problem16.clj" "(+ 1 1)" "(str 1232)" "(map (fn[n] n) (str 1232))" "(reduce + (map (fn[n] n) (str 1232)))" "(reduce + (map (fn[n] (int n)) (str 1232)))" "(reduce + (map (fn[n] (int (str n))) (str 1232)))" "(int \\"1\\")" "(int \\\\1)" "(int \\\\0\\n     )" "(reduce + (map (fn[n] (- (int n) 48)) (str 1232)))" ";; Loading file src\\\\problem16.clj" ";; Loading file src\\\\problem20.clj" "(doc first)" "(doc \\n  take)" "(doc filter)" ";; Loading file src\\\\problem12.clj" "(take 1 (problem12/triang))" "(cons 3 (triang 3 3))" "(cons 3 (problem12/triang 3 3))" ";; Loading file src\\\\problem12.clj" "(lazy-seq (cons 3 (triang 3 3)))" "(lazy-seq (cons 3 (problem12/triang 3 3)))" ";; Loading file src\\\\problem20.clj" ";; Loading file src\\\\problem03.clj" ";; Loading file src\\\\problem10.clj" "(+ 1 1)" "(doc line-seq)" "(seq 1 20)" "(list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)" ";; Loading file src\\\\problem05.clj" "(filter \#(\= % 1) (list 1 2 3))" "(doc some)" "(mapcat \\r\\n    (fn[i](list i))\\r\\n    (list 1 2 3))" "(list)" "(doc difference)" "(range 1 20)" "(+ 1 1)" "(first '(1 2 3))" "(rest '(1 2 3))" "(empty? '())\\n" "(first '())" "(filter \#(\= % 1) '(1 2 3))" "(filter \#(\= % 1) '(2 3))\\n" "(values (filter \#(\= % 1) '(2 3)))" ";; Loading file src\\\\problem05.clj" "(list-contains-items '(1 2 3) '(1 2))" "(problem05/list-contains-items '(1 2 3) '(1 2))" ";; Loading file src\\\\problem05.clj" "(problem05/list-contains-items '(1 2 3) '(1 2))" "(problem05/list-contains-items '(1 2 3) '(1 3))" "(problem05/list-contains-items '(1 2 3) '(1 4))" "(problem05/list-contains-items '(1 2 3) '(1 2 3 4))" ";; Loading file src\\\\problem05.clj" ";; Loading file src\\\\problem03.clj" ";; Loading file src\\\\problem05.clj" "(range 20 2)" "(reverse (range 2 20))" "(reverse (range 2 21))" ";; Loading file src\\\\problem05.clj" ";; Loading file src\\\\problem03.clj" ";; Loading file src\\\\problem05.clj" "(reduce min '(1 2 3 4 5 6 7) '(4 5 6))" "(+ 1 1)" ";; Loading file src\\\\problem03.clj" ";; Loading file src\\\\problem05.clj" "(problem03/divisors 20)" "(problem03/divisors 19)" "(problem03/divisors 18)" " (problem03/divisors 17)" " (problem03/divisors 16)" "(problem03/divisors 15)" "(problem03/divisors 14)" "(problem03/divisors 13)" "(problem03/divisors 12)" "(range 10 21)" "(reverse (range 10 21))" "(get-first-with-divisors 2 (list 10 9 8 7 6))" "(problem05/get-first-with-divisors 2 (list 10 9 8 7 6))" "(problem05/get-first-with-divisors 10 10 (list 10 9 8 7 6))" ";; Loading file src\\\\problem05.clj" "(problem05/get-first-with-divisors 2 (list 10 9 8 7 6))" "(problem05/get-first-with-divisors 10 10 (list 10 9 8 7 6))" ";; Loading file src\\\\problem05.clj" "(problem05/get-first-with-divisors 10 10 (list 10 9 8 7 6))"]
eclipse.preferences.version=1
